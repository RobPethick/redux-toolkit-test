{"version":3,"sources":["app/hooks.ts","features/filters/filterSlice.ts","features/bookingGrid/bookingGridSlice.ts","features/filters/SpecialismSelector.tsx","features/filters/AppointmentMediumSelector.tsx","features/filters/TimeslotSelector.tsx","features/filters/Filters.tsx","features/bookingGrid/Counsellor.tsx","features/bookingGrid/BookingGrid.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","date","time","undefined","specialisms","appointment_mediums","appointment_type","filterSlice","createSlice","name","reducers","setDateFilter","state","action","payload","setSpecialismsFilter","setAppointmentTypeFilter","setAppointmentMediumsFilter","setTimeslotFilter","actions","selectDateFilter","filter","selectSelectedSpecialisms","selectSelectedAppointmentTypes","selectSelectedAppointmentMediums","selectSelectedTimeslot","bookingGridSlice","availabilities","counsellors","importAvailabilities","importCounsellors","selectCounsellors","bookingGrid","selectCurrentAvailabilities","createSelector","selectedDate","DateTime","fromISO","mapObjIndexed","array","filteredAvailabilities","availability","hasSame","datetime","sortedAvailabilities","sortBy","a","uniqBy","selectFilteredCounsellors","currentAvailabilities","filteredSpecialisms","filteredAppointmentType","fitleredAppointmentMediums","filteredTimeslot","map","c","id","where","length","some","toFormat","s","every","fs","includes","appointment_types","selectAvailableSpecialisms","uniq","flatMap","selectAvailableAppointmentMediums","selectAvailableTimeslots","Object","values","flat","SpecialismSelector","availableSpecialisms","selectedSpecialisms","dispatch","FormControl","sx","m","width","InputLabel","Select","value","onChange","target","autoWidth","multiple","label","specialism","MenuItem","AppointmentMediumSelector","availableAppointmentMediums","selectedAppointmentMediums","AppointmentMedium","TimeslotSelector","availableTimeslots","selectedTimeslot","selectedTimeslots","timeslot","Filters","dateValue","MobileDatePicker","inputFormat","event","renderInput","params","TextField","Counsellor","counsellor","useState","selectedSlot","setSelectedSlot","Accordion","AccordionSummary","expandIcon","ExpandMore","Typography","firstName","lastName","AccordionDetails","join","ButtonGroup","Button","onClick","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","Date","toLocaleDateString","toLocaleTimeString","TabMap","one_off","consultation","BookingGrid","availableCounsellors","appointmentType","Tabs","Tab","App","className","store","configureStore","reducer","filterReducer","bookingGridReducer","Boolean","window","location","hostname","match","CounsellorData","AvailabilityData","theme","createTheme","palette","primary","main","ReactDOM","render","StrictMode","ThemeProvider","LocalizationProvider","dateAdapter","DateAdapter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae29fa2f.chunk.js","sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState } from '../../app/store';\n\nexport interface FilterState {\n  date: string;\n  time: string | undefined;\n  specialisms: string[];\n  appointment_mediums: string[];\n  appointment_type: 'one_off' | 'consultation';\n}\n\nconst initialState: FilterState = {\n  date: '2021-07-25T00:00:00.000Z',\n  time: undefined,\n  specialisms: [],\n  appointment_mediums: [],\n  appointment_type: 'one_off',\n};\n\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    setDateFilter: (state, action: PayloadAction<string | null>) => {\n      if (action.payload) {\n        state.date = action.payload;\n      }\n    },\n    setSpecialismsFilter: (state, action: PayloadAction<string[]>) => {\n      state.specialisms = action.payload;\n    },\n    setAppointmentTypeFilter: (state, action: PayloadAction<'one_off' | 'consultation'>) => {\n      state.appointment_type = action.payload;\n    },\n    setAppointmentMediumsFilter: (state, action: PayloadAction<string[]>) => {\n      state.appointment_mediums = action.payload;\n    },\n    setTimeslotFilter: (state, action: PayloadAction<string | undefined>) => {\n      state.time = action.payload;\n    },\n  },\n});\n\nexport const { setDateFilter, setSpecialismsFilter, setAppointmentTypeFilter, setAppointmentMediumsFilter, setTimeslotFilter } = filterSlice.actions;\n\nexport const selectDateFilter = (state: RootState) => state.filter.date;\nexport const selectSelectedSpecialisms = (state: RootState) => state.filter.specialisms;\nexport const selectSelectedAppointmentTypes = (state: RootState) => state.filter.appointment_type;\nexport const selectSelectedAppointmentMediums = (state: RootState) => state.filter.appointment_mediums;\nexport const selectSelectedTimeslot = (state: RootState) => state.filter.time;\n\n\nexport default filterSlice.reducer;\n","import { createSelector, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { DateTime } from 'luxon';\nimport { mapObjIndexed, sortBy, uniq, uniqBy, where } from 'ramda';\nimport { RootState } from '../../app/store';\nimport { selectDateFilter, selectSelectedAppointmentMediums, selectSelectedAppointmentTypes, selectSelectedSpecialisms, selectSelectedTimeslot } from '../filters/filterSlice';\n\nexport interface Counsellor {\n  id: string,\n  firstName: string,\n  lastName: string,\n  appointment_types: string[],\n  appointment_mediums: string[],\n  specialisms: string[]\n}\n\nexport interface Availability {\n  id: string;\n  datetime: string;\n}\n\nexport interface BookingGrid {\n  availabilities: { [counsellorId in string]: Availability[] };\n  counsellors: Counsellor[];\n}\n\nconst initialState: BookingGrid = {\n  availabilities: {},\n  counsellors: [],\n};\n\n\nexport const bookingGridSlice = createSlice({\n  name: 'filter',\n  initialState,\n  reducers: {\n    importAvailabilities: (state, action: PayloadAction<BookingGrid['availabilities']>) => {\n      state.availabilities = action.payload;\n    },\n    importCounsellors: (state, action: PayloadAction<Counsellor[]>) => {\n      state.counsellors = action.payload;\n    },\n  },\n});\n\nexport const { importAvailabilities, importCounsellors } = bookingGridSlice.actions;\n\nexport const selectAvailabilities = (state: RootState) => state.bookingGrid.availabilities;\nexport const selectCounsellors = (state: RootState) => state.bookingGrid.counsellors;\nexport const selectCurrentAvailabilities = createSelector(selectAvailabilities, selectDateFilter,\n  (availabilities, date) => {\n    const selectedDate = DateTime.fromISO(date);\n    return mapObjIndexed((array) => {\n      const filteredAvailabilities = array.filter((availability) => selectedDate.hasSame(DateTime.fromISO(availability.datetime), 'day'))\n      const sortedAvailabilities = sortBy((a) => a.datetime, filteredAvailabilities);\n      return uniqBy((a) => a.datetime, sortedAvailabilities);\n    }, availabilities);\n  });\n\nexport const selectFilteredCounsellors = createSelector(\n  selectCurrentAvailabilities,\n  selectCounsellors,\n  selectSelectedSpecialisms,\n  selectSelectedAppointmentTypes,\n  selectSelectedAppointmentMediums,\n  selectSelectedTimeslot,\n  (currentAvailabilities, counsellors, filteredSpecialisms, filteredAppointmentType, fitleredAppointmentMediums, filteredTimeslot) => {\n    return counsellors.map((c) => ({ ...c, availabilities: currentAvailabilities[c.id] ?? [] }))\n      .filter(where({\n        availabilities: (a: Availability[]) => a.length !== 0 && (filteredTimeslot === undefined || a.some((a) => DateTime.fromISO(a.datetime).toFormat('HH:mm') === filteredTimeslot)),\n        specialisms: (s: string[]) => filteredSpecialisms.length === 0 || filteredSpecialisms.every((fs) => s.includes(fs)),\n        appointment_types: (s: string[]) => s.includes(filteredAppointmentType),\n        appointment_mediums: (s: string[]) => fitleredAppointmentMediums.length === 0 || fitleredAppointmentMediums.every((fs) => s.includes(fs))\n      }))\n  }\n)\n\nexport const selectAvailableSpecialisms = createSelector(selectCounsellors, (counsellors) => uniq(counsellors.flatMap((c) => c.specialisms)));\nexport const selectAvailableAppointmentTypes = createSelector(selectCounsellors, (counsellors) => uniq(counsellors.flatMap((c) => c.appointment_types)));\nexport const selectAvailableAppointmentMediums = createSelector(selectCounsellors, (counsellors) => uniq(counsellors.flatMap((c) => c.appointment_mediums)));\nexport const selectAvailableTimeslots = createSelector(selectCurrentAvailabilities, (availabilities) => sortBy((a) => a, uniq(Object.values(availabilities).flat().map((a) => DateTime.fromISO(a.datetime).toFormat('HH:mm'))))); //counsellors.flatMap((c) => c.availabilities.map((a) =>))));\n\n\n\nexport default bookingGridSlice.reducer;\n","import React from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { selectSelectedSpecialisms, setSpecialismsFilter } from './filterSlice';\nimport { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { selectAvailableSpecialisms } from '../bookingGrid/bookingGridSlice';\n\nexport function SpecialismSelector() {\n  const availableSpecialisms = useAppSelector(selectAvailableSpecialisms);\n  const selectedSpecialisms = useAppSelector(selectSelectedSpecialisms);\n\n  const dispatch = useAppDispatch()\n  return (\n    <FormControl sx={{ m: 1, width: 300 }}>\n      <InputLabel>Specialisms</InputLabel>\n      <Select\n        value={selectedSpecialisms}\n        onChange={(selectedSpecialisms) => dispatch(setSpecialismsFilter(selectedSpecialisms.target.value as string[]))}\n        autoWidth\n        multiple\n        label=\"Specialisms\"\n      >\n        {\n          availableSpecialisms.map((specialism) => <MenuItem value={specialism}>{specialism}</MenuItem>)\n        }\n      </Select>\n    </FormControl>\n  );\n}\n","import React from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { selectSelectedAppointmentMediums, setAppointmentMediumsFilter } from './filterSlice';\nimport { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { selectAvailableAppointmentMediums } from '../bookingGrid/bookingGridSlice';\n\nexport function AppointmentMediumSelector() {\n  const availableAppointmentMediums = useAppSelector(selectAvailableAppointmentMediums);\n  const selectedAppointmentMediums = useAppSelector(selectSelectedAppointmentMediums);\n\n  const dispatch = useAppDispatch()\n  return (\n    <FormControl sx={{ m: 1, width: 200 }}>\n      <InputLabel>Appointment Mediums</InputLabel>\n      <Select\n        value={selectedAppointmentMediums}\n        onChange={(selectedAppointmentMediums) => dispatch(setAppointmentMediumsFilter(selectedAppointmentMediums.target.value as string[]))}\n        autoWidth\n        multiple\n        label=\"Appointment Mediums\"\n      >\n        {\n          availableAppointmentMediums.map((AppointmentMedium) => <MenuItem value={AppointmentMedium}>{AppointmentMedium}</MenuItem>)\n        }\n      </Select>\n    </FormControl>\n  );\n}\n","import React from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { selectSelectedTimeslot, setTimeslotFilter } from './filterSlice';\nimport { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { selectAvailableTimeslots } from '../bookingGrid/bookingGridSlice';\n\nexport function TimeslotSelector() {\n  const availableTimeslots = useAppSelector(selectAvailableTimeslots);\n  const selectedTimeslot = useAppSelector(selectSelectedTimeslot);\n\n  const dispatch = useAppDispatch()\n  return (\n    <FormControl sx={{ m: 1, width: 200 }}>\n      <InputLabel>Available Timeslots</InputLabel>\n      <Select\n        value={selectedTimeslot}\n        onChange={(selectedTimeslots) => dispatch(setTimeslotFilter(selectedTimeslots.target.value as string))}\n        autoWidth\n        label=\"Available Timeslots\"\n      >\n        <MenuItem value={undefined}>Any time</MenuItem>\n        {\n          availableTimeslots.map((timeslot) => <MenuItem value={timeslot}>{timeslot}</MenuItem>)\n        }\n      </Select>\n    </FormControl>\n  );\n}\n","import React from 'react';\n\nimport { useAppSelector, useAppDispatch } from '../../app/hooks';\nimport { selectDateFilter, setDateFilter } from './filterSlice';\nimport MobileDatePicker from '@mui/lab/MobileDatePicker';\nimport { FormControl, TextField } from '@mui/material';\nimport { SpecialismSelector } from './SpecialismSelector';\nimport { AppointmentMediumSelector } from './AppointmentMediumSelector';\nimport { TimeslotSelector } from './TimeslotSelector';\n\nexport function Filters() {\n  const dispatch = useAppDispatch();\n  const dateValue = useAppSelector(selectDateFilter)\n  return (\n    <div>\n      <FormControl sx={{ m: 1}}>\n        <MobileDatePicker\n          label=\"Date\"\n          inputFormat=\"dd/MM/yyyy\"\n          value={dateValue}\n          onChange={(event) => dispatch(setDateFilter(event))}\n          renderInput={(params) => <TextField {...params} />}\n        />\n      </FormControl>\n      <SpecialismSelector />\n      <TimeslotSelector />\n      <AppointmentMediumSelector />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { selectFilteredCounsellors } from './bookingGridSlice';\nimport { Accordion, AccordionSummary, AccordionDetails, Typography, ButtonGroup, Button, Dialog, DialogTitle, DialogContent, DialogContentText } from '@mui/material';\nimport { ExpandMore } from '@mui/icons-material';\nimport { DateTime } from 'luxon';\n\nexport interface CounsellorProps {\n  counsellor: ReturnType<typeof selectFilteredCounsellors>[0]\n}\nexport function Counsellor({ counsellor }: CounsellorProps) {\n  const [selectedSlot, setSelectedSlot] = useState<string | null>(null);\n  return (\n    <Accordion>\n      <AccordionSummary\n        expandIcon={<ExpandMore />}\n      >\n        <Typography>{`${counsellor.firstName} ${counsellor.lastName}`}</Typography>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Typography>\n          Appointment mediums: {counsellor.appointment_mediums.join(', ')}\n        </Typography>\n        <Typography>\n          Appointment types: {counsellor.appointment_types.join(', ')}\n        </Typography>\n        <Typography>\n          Specialisms: {counsellor.specialisms.join(', ')}\n        </Typography>\n        <ButtonGroup>\n          {counsellor.availabilities.map((availability) => <Button onClick={() => setSelectedSlot(availability.datetime)}>{DateTime.fromISO(availability.datetime).toFormat('HH:mm')}</Button>)}\n        </ButtonGroup>\n      </AccordionDetails>\n      <Dialog open={selectedSlot !== null} onClose={() => setSelectedSlot(null)}>\n        <DialogTitle>Booking successful!</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            {`Congratulations you have successfully booked an appointment with: ${counsellor.firstName} ${counsellor.lastName} on ${(new Date(selectedSlot!)).toLocaleDateString()} at ${(new Date(selectedSlot!)).toLocaleTimeString()}`}\n          </DialogContentText>\n        </DialogContent>\n      </Dialog>\n    </Accordion>\n  );\n}\n","\nimport { Tab, Tabs } from '@mui/material';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { selectSelectedAppointmentTypes, setAppointmentTypeFilter } from '../filters/filterSlice';\nimport { selectFilteredCounsellors } from './bookingGridSlice';\nimport { Counsellor } from './Counsellor';\nconst TabMap = {\n  one_off: 0,\n  consultation: 1\n}\nexport function BookingGrid() {\n  const availableCounsellors = useAppSelector(selectFilteredCounsellors);\n  const appointmentType = useAppSelector(selectSelectedAppointmentTypes);\n  const dispatch = useAppDispatch();\n  const selectedAppointmentType = 'one_off';\n  return (\n    <div>\n      <Tabs value={TabMap[appointmentType]} aria-label=\"nav tabs example\">\n        <Tab\n          label=\"One off\"\n          onClick={() => dispatch(setAppointmentTypeFilter('one_off'))}\n        />\n        <Tab\n          label=\"Consultation\"\n          onClick={() => dispatch(setAppointmentTypeFilter('consultation'))}\n        />\n      </Tabs>\n      {\n        availableCounsellors.map((counsellor) => <Counsellor counsellor={counsellor} />)\n      }\n    </div>\n  );\n}\n","import React from 'react';\nimport { Filters } from './features/filters/Filters';\nimport './App.css';\nimport { BookingGrid } from './features/bookingGrid/BookingGrid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Filters />\n      <BookingGrid />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport bookingGridReducer from '../features/bookingGrid/bookingGridSlice';\nimport filterReducer from '../features/filters/filterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    filter: filterReducer,\n    bookingGrid: bookingGridReducer\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport DateAdapter from '@mui/lab/AdapterLuxon';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AvailabilityData from './data/availability-mock.json';\nimport CounsellorData from './data/counsellor-mock.json';\nimport { importAvailabilities, importCounsellors } from './features/bookingGrid/bookingGridSlice';\nimport { createTheme, ThemeProvider } from '@mui/material';\n\nstore.dispatch(importCounsellors(CounsellorData));\nstore.dispatch(importAvailabilities(AvailabilityData));\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#35D0BA',\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <LocalizationProvider dateAdapter={DateAdapter}>\n        <Provider store={store}>\n          <App />\n        </Provider>\n      </LocalizationProvider>\n    </ThemeProvider >\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}